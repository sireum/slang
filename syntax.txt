<program>          ::=  <package>?
                        import org . sireum . _
                        <stmt>*
                        
<package>          ::=  package <name>

<name>             ::=  <ID> ⸨ . <ID> ⸩*
                   
<stmt>             ::=  <import-stmt>
                     |  <decl-stmt>
                     |  <assign-stmt>
                     |  <print-stmt>
                     |  <if-stmt>
                     |  <match-stmt>
                     |  <while-stmt>
                     |  <for-stmt>
                     |  <return-stmt>
                     |  <proof-stmt>

<import-stmt>      ::=  import <name> ⸨ . { <import-sel> ⸨ , <import-sel> ⸩* } ⸩?
                     |  import <ID> . _

<import-sel>       ::=  <ID>
                     |  <ID> => <ID>

<decl-stmt>        ::=  <val-decl>
                     |  <var-decl>
                     |  <def-decl>
                     |  <enum-decl>
                     |  <object-decl>
                     |  <sig-decl>
                     |  <datatype-decl>
                     |  <record-decl>
                     |  <rich-decl>
                     |  <type-decl>

<val-decl>         ::=  val <ID> ⸨ : <type> ⸩? = <assign-exp>
                     |  @spec val <ID> : <type> = $
                     |  val <pattern> = <assign-exp>

<var-decl>         ::=  var <ID> ⸨ : <type> ⸩? = <assign-exp>
                     |  @spec var <ID> : <type> = $
                     |  var <pattern> = <assign-exp>

<def-decl>         ::=  ⸨ @pure ⸩? def <ID> <type-params>? <params>? : <type>
                     |  ⸨ @pure ⸩? def <ID> <type-params>? <params>? : <type> = <def-body>
                     |  ⸨ @pure ⸩? def <ID> <type-params>? <params>? : <type> = $
                     |  ⸨ @pure ⸩? def <ID> <type-params>? <params>? : <type> = <ldef-contract>
                     |  @spec def <ID> <type-params>? <params>? : <type> = $
                     |  @spec def <ID> <type-params>? <params>? : <type> = <ldef-contract>

<enum-decl>        ::=  @enum object <ID> { <SYMBOL>* }

<object-decl>      ::=  object <ID> <extends>? { <stmt>* }
                     |  @ext object <ID> { <stmt>* }

<sig-decl>         ::=  @sig ⸨ sealed ⸩? trait <ID> <type-params>? <extends>? { <stmt>* }

<datatype-decl>    ::=  @datatype trait <ID> <type-params>? <extends>? { <stmt>* }
                     |  @datatype class <ID> <type-params>? <datatype-params>? <extends>? { <stmt>* }

<record-decl>      ::=  @record trait <ID> <type-params>? <extends>? { <stmt>* }
                     |  @record class <ID> <type-params>? <record-params>? <extends>? { <stmt>* }

<rich-decl>        ::=  @rich trait <ID> <type-params> <extends>? { <stmt>* }
                     |  @rich class <ID> <type-params>? <params>? <extends>? { <stmt>* }

<type-decl>        ::=  type <ID> <type-params>? = <type>

<type>             ::=  <name> <type-args>?
                     |  ( <type> ⸨ , <type> ⸩+ )
                     |  <type> => <type>

<type-args>        ::=  [ <type> ⸨ , <type> ⸩* ]

<assign-exp>       ::=  <exp>
                     |  <block-assign-exp>
                     |  <if-assign-exp>
                     |  <match-assign-exp>

<pattern>          ::=  <ID>
                     |  _
                     |  ⸨ <ID> @ ⸩? <name> ( <paterns>? )
                     |  ⸨ <ID> @ ⸩? ( <paterns> )

<type-params>      ::=  [ <type-param> ⸨ , <type-param> ⸩* ]

<type-param>       ::=  <ID> ⸨ <: type ⸩?

<params>           ::=  ( ⸨ <param> ⸨ , param> ⸩* ⸩? )

<param>            ::=  ⸨ @pure ⸩? <ID> : <type>

<def-body>         ::=  {
                          <ldef-contract>?
                          <stmt>*
                        }

<extends>          ::=  extends <type> ⸨ with <type> ⸩*

<datatype-params>  ::=  ( ⸨ <datatype-param> ⸨ , <datatype-param> ⸩* ⸩? )

<datatype-param>   ::=  <adt-param-mod>* <ID> : <type>

<adt-param-mod>    ::=  @pure
                     |  @hidden

<record-params>    ::=  ( ⸨ <record-param> ⸨ , <record-param> ⸩* ⸩? )

<record-param>     ::=  <adt-param-mod>* ⸨ var ⸩*  <ID> : <type>

<assign-stmt>      ::=  <lhs> = <assign-exp>
                     |  up ( <lhs> ) = <assign-exp>
                     |  pat ( <pattern> ) = <assign-exp>

<lhs>              ::=  <ID>
                     |  <lhs> . <ID>
                     |  <lhs> ( <exp> )

<print-stmt>       ::=  print ( <print-arg> ⸨ , <print-arg> ⸩* )
                     |  println ( ⸨ <print-arg> ⸨ , <print-arg> ⸩* ⸩? )

<print-arg>        ::=  <exp>
                     |  <string-exp>

<if-stmt>          ::=  if ( <exp> ) { <stmt>* } ⸨ else { <stmt>* } ⸩?
                     |  if ( <exp> ) { <stmt>* } else <if-stmt>

<match-stmt>       ::=  <exp> match { <match-case>+ }

<match-case>       ::=  case <lit> => <stmt>*
                     |  case <pattern> ⸨ if <exp> ⸩? => <stmt>*

<while-stmt>       ::=  while ( <exp> ) {
                          <loop-contract>?
                          <stmt>*
                        }
                     |  do {
                          <stmt>*
                          <loop-contract>?
                        } while ( <exp> )

<for-stmt>         ::=  for ( <for-gen> ) {
                          <loop-contract>?
                          <stmt>*
                        }

<for-gen>          ::=  <ID> <- <for-range>

<for-range>        ::=  <exp>
                     |  <exp> . indices
                     |  <exp> . reverseIndices
                     |  <exp> =-= <exp>
                     |  <exp> =-< <exp>
                     |  <exp> <-= <exp>
                     |  <exp> <-< <exp>
                     |  <exp> >-= <exp>
                     |  <exp> >-> <exp>

<return-stmt>      ::=  return <exp>?

<proof-stmt>       ::=  assert(<exp>)
                     |  assert(<exp>, <string-exp>)
                     |  assume(<exp>)
                     |  assume(<exp>, <string-exp>)
                     |  l""" <l-proof> """

<block-assign-exp> ::=  { <stmt>* <exp> }

<if-assign-exp>    ::=  if ( <exp> ) <block-assign-exp> else <block-assign-exp>
                     |  if ( <exp> ) <block-assign-exp> else <if-assign-exp>

<match-assign-exp> ::=  <exp> match { ⸨ <match-case> <exp> ⸩+ }

<string-exp>       ::=  <STRING>
                     |  <STRING-INTERP>

<exp>              ::=  <lit>
                     |  <string-exp>
                     |  <name>
                     |  <exp> _
                     |  ( <exp> ⸨ , <exp> ⸩* )
                     |  <exp> . <ID> <args>?
                     |  <exp> <args>
                     |  <unary-op> <exp>
                     |  <exp> <binary-op> <exp>
                     |  if ( <exp> ) <exp> else <exp>

<lit>              ::=  true
                     |  false
                     |  <INT>
                     |  <FLOAT>
                     |  z"<INT>"
                     |  z8"<INT>"
                     |  z16"<INT>"
                     |  z32"<INT>"
                     |  z64"<INT>"
                     |  n"<INT>"
                     |  n8"<INT>"
                     |  n16"<INT>"
                     |  n32"<INT>"
                     |  n64"<INT>"
                     |  s8"<INT>"
                     |  s16"<INT>"
                     |  s32"<INT>"
                     |  s64"<INT>"
                     |  u8"<INT>"
                     |  u16"<INT>"
                     |  u32"<INT>"
                     |  u64"<INT>"
                     |  f32"<FLOAT>"
                     |  f64"<FLOAT>"
                     |  r"<REAL>"

<args>             ::=  <type-args>? ( ⸨ <apply-arg> ⸨ , <apply-arg> ⸩* ⸩? )

<apply-arg>        ::=  <exp>
                     |  <exp> -> <exp>
                     |  <ID> = <exp>

<unary-op>         ::=  !
                     |  +
                     |  -
                     |  ~
                     |  ¬

<binary-op>        ::=  +
                     |  -
                     |  *
                     |  /
                     |  %
                     |  ==
                     |  !=
                     |  <<
                     |  >>
                     |  >>>
                     |  <
                     |  <=
                     |  >
                     |  >=
                     |  &
                     |  |
                     |  |^
                     |  ≡
                     |  ≠
                     |  ≤
                     |  ≥
                     |  ∧
                     |  ∨
                     |  ⊻
                     |  →

<l-proof>          ::=  <fact>
                     |  <invariant>
                     |  <sequent>
                     |  <proof>
                     |  <theorem>

<ldef-contract>    ::=  l""" <def-contract> """
