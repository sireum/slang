<unit>             ::=  <program>
                     |  <sequent>

<program>          ::=  <package>?
                        import org . sireum . _
                        <stmt>*
                        
<package>          ::=  package <name>

<name>             ::=  <ID> ⸨ . <ID> ⸩*
                   
<stmt>             ::=  <import-stmt>
                     |  <decl-stmt>
                     |  <assign-stmt>
                     |  <block-stmt>
                     |  <if-stmt>
                     |  <match-stmt>
                     |  <while-stmt>
                     |  <for-stmt>
                     |  <return-stmt>
                     |  Deduce (...)        // for ..., see https://github.com/sireum/runtime/blob/master/library/shared/src/main/scala/org/sireum/contract.scala
                     |  Spec ( <STRING> )
                     |  Spec { <stmt>* }
                     |  <exp>

<import-stmt>      ::=  import <name> ⸨ . { <import-sel> ⸨ , <import-sel> ⸩* } ⸩?
                     |  import <name> . _

<import-sel>       ::=  <ID>
                     |  <ID> => <ID>

<decl-stmt>        ::=  <val-decl>
                     |  <var-decl>
                     |  <def-decl>
                     |  <subz-decl>
                     |  <enum-decl>
                     |  <object-decl>
                     |  <sig-decl>
                     |  <datatype-decl>
                     |  <record-decl>
                     |  <type-decl>
                     |  @spec def <ID> = Invariant(...)
                     |  @spec def <ID> <type-params>? = Theorem(...)
                     |  @spec def <ID> <type-params>? = Lemma(...)
                     |  @spec def <ID> <type-params>? = Fact(...)
                     |  @just ⸨ ( ⸨ name = ⸩?  ) <STRING> ⸩? def <ID> <params>? : Unit = $

<val-decl>         ::=  val <pattern> ⸨ : <type> ⸩? = <assign-exp>
                     |  @spec val <ID> : <type> = $
                     |  @rw val <ID> : RS = <exp>

<var-decl>         ::=  var <pattern> ⸨ : <type> ⸩? = <assign-exp>
                     |  @spec var <ID> : <type> = $

<def-decl>         ::=  <def-mod> def <ID> <type-params>? <params>? : <type>
                     |  <def-mod> def <ID> <type-params>? <params>? : <type> = <def-body>
                     |  <def-mod> def <ID> <type-params>? <params>? : <type> = $
                     |  <def-mod> def <ID> <type-params>? <params>? : <type> = Contract.Only(...)
                     |  @spec def <ID> <type-params>? <params>? : <type> = $
                     |  @just def <ID> <type-params>? <params>? : Unit = $

<def-mod>          ::=  ⸨ @pure | @strictpure | @abs | @memoize | @helper | @inline | @tailrec ⸩* ⸨ override ⸩?

<subz-decl>        ::=  @range ( <range-args> ) class <ID>
                     |  @bits ( <bits-args> ) class <ID>

<range-args>       ::=  min = <lit> ⸨ , max = <lit> ⸩? ⸨ , index = <lit> ⸩?
                     |  max = <lit> ⸨ , index = <lit> ⸩?

<bits-args>        ::=  signed = <lit> , width = <lit> ⸨ , min = <lit> ⸩? ⸨ , max = <lit> ⸩? ⸨ , index = <lit> ⸩?

<enum-decl>        ::=  @enum object <ID> { ⸨ <SYMBOL> | <STRING> ⸩* }

<object-decl>      ::=  object <ID> { <stmt>* }
                     |  @ext ⸨ ( ⸨ name = ⸩?  ) <STRING> ⸩? object <ID> { <stmt>* }

<sig-decl>         ::=  @sig ⸨ sealed ⸩? trait <ID> <type-params>? <extends>? { <stmt>* }
                     |  @msig ⸨ sealed ⸩? trait <ID> <type-params>? <extends>? { <stmt>* }

<datatype-decl>    ::=  @datatype trait <ID> <type-params>? <extends>? { <stmt>* }
                     |  @datatype class <ID> <type-params>? <datatype-params>? <extends>? { <stmt>* }

<record-decl>      ::=  @record trait <ID> <type-params>? <extends>? { <stmt>* }
                     |  @record class <ID> <type-params>? <record-params>? <extends>? { <stmt>* }

<type-decl>        ::=  type <ID> <type-params>? = <type>

// Notes:
// Built-in types are in the org.sireum package
// Built-in immutable basic types:  B, C, String, F32, F64, R, Unit
// Built-in immutable sequence:     IS [ <int-type> , <type> ]
// Built-in mutable sequence:       MS [ <int-type> , <type> ]

<type>             ::=  <name> <type-args>?
                     |  ( <type> ⸨ , <type> ⸩+ )
                     |  <type> => <type> ⸨ @pure ⸩?

<type-args>        ::=  [ <type> ⸨ , <type> ⸩* ]

<assign-exp>       ::=  <exp>
                     |  <block-assign-exp>
                     |  <if-assign-exp>
                     |  <match-assign-exp>

<pattern>          ::=  <lit>
                     |  <name>
                     |  ⸨ <name> ⸩? . `<ID>`
                     |  <ID> : <type>
                     |  _ ⸨ : <type> ⸩?
                     |  ⸨ <ID> @ ⸩? <name> ( <patterns>? )
                     |  ⸨ <ID> @ ⸩? ( <patterns> )
                     |  _*

<patterns>         ::=  <pattern> ⸨ , <pattern> ⸩*

<type-params>      ::=  [ <type-param> ⸨ , <type-param> ⸩* ]

<type-param>       ::=  ⸨ @mut ⸩? <ID>
                     |  @imm <ID>

<params>           ::=  ( ⸨ <param> ⸨ , param> ⸩* ⸩? )

<param>            ::=  ⸨ <param-mod> ⸩? <ID> : <param-type>

<param-mod>        ::=  @hidden // only for @memoize def

<param-type>       ::=  <type>
                     |  => <type> ⸨ @pure ⸩?

<def-body>         ::=  {
                          ⸨ Contract(...) ⸩?
                          <stmt>*
                        }

<extends>          ::=  extends <type> ⸨ with <type> ⸩*

<datatype-params>  ::=  ( ⸨ <datatype-param> ⸨ , <datatype-param> ⸩* ⸩? )

<datatype-param>   ::=  ⸨ @hidden ⸩? ⸨ val ⸩? <ID> : <type>

<record-params>    ::=  ( ⸨ <record-param> ⸨ , <record-param> ⸩* ⸩? )

<record-param>     ::=  ⸨ @hidden ⸩? ⸨ val ⸩?  <ID> : <type>
                     |  ⸨ @hidden ⸩? var  <ID> : <type>

<assign-stmt>      ::=  <lhs> = <assign-exp>

<lhs>              ::=  <ID>
                     |  <lhs> . <ID>
                     |  <lhs> ( <exp> )

<if-stmt>          ::=  if ( <exp> ) { <stmt>* } ⸨ else { <stmt>* } ⸩?
                     |  if ( <exp> ) { <stmt>* } else <if-stmt>

<match-stmt>       ::=  <exp> match { <match-case>+ }

<match-case>       ::=  case <pattern> ⸨ if <exp> ⸩? => <stmt>*

<while-stmt>       ::=  while ( <exp> ) {
                          ⸨ Invariant( ⸨ MaxIt(<INT>) , ⸩? Modifies(...), ...) ⸩?
                          <stmt>*
                        }
                     |  do {
                          ⸨ Invariant(  ⸨ MaxIt(<INT>) , ⸩? Modifies(...), ...) ⸩?
                          <stmt>*
                        } while ( <exp> )

<for-stmt>         ::=  for ( <for-enum-gen> ) {
                          ⸨ Invariant(  ⸨ MaxIt(<INT>) , ⸩? Modifies(...), ...) ⸩?
                          <stmt>*
                        }

<for-enum-gen>     ::=  <ID> <- <for-range> ⸨ if <exp> ⸩?

<for-range>        ::=  <exp>
                     |  <exp> until <exp> ⸨ by <exp> ⸩?
                     |  <exp> to <exp> ⸨ by <exp> ⸩?

<return-stmt>      ::=  return <exp>?

<block-assign-exp> ::=  { <stmt>* <assign-exp> }

<if-assign-exp>    ::=  if ( <exp> ) <block-assign-exp> else <block-assign-exp>
                     |  if ( <exp> ) <block-assign-exp> else <if-assign-exp>

<match-assign-exp> ::=  <exp> match { ⸨ <match-case> <assign-exp> ⸩+ }

<exp>              ::=  <lit>
                     |  <STRING-INTERP>      // s"..."  or s"""..."""
                     |  <ST-INTERP>          // st"..." or st"""...""" (see syntax-notes.md)
                     |  <name>
                     |  this
                     |  super ⸨ [ <name> ] ⸩?
                     |  <exp> _
                     |  <unary-op> <exp>
                     |  <exp> <binary-op> <exp>
                     |  ( <exp> ⸨ , <exp> ⸩* )
                     |  <exp> . <ID> <args>?
                     |  <exp> <args>
                     |  if ( <exp> ) <exp> else <exp>
                     |  for ( <for-enum-gen> ⸨ ; <for-enum-gen> ⸩* ) yield <exp>
                     |  ( <params> ) => <exp>
                     |  { ( <params> ) => <stmt>* <exp> }
                     |  <quant-op> ( <exp> ) ( ( <params> ) => <exp> )
                     |  <quant-op> { ( <params> ) => <stmt>* <exp> }        // only in spec context
                     |  At [ <type> ] ( <STRING> ⸨ , <int-lit> ⸩+ )         // only in spec context
                     |  At ( <exp> ⸨ , <int-lit> ⸩+ )                       // only in spec context
                     |  In ( <exp> )                                        // only in spec context
                     |  Old ( <exp> )                                       // only in spec context right after an assignment
                     |  <ID> ~ <exp> ⸨ ~ <exp> ⸩*                           // only in spec context
                     |  ? ( <exp> ⸨ , <exp> ⸩* ) { ( <params> ) => <exp> }  // only in spec context
                     |  <block-assign-exp>                                  // only in spec context
                     |  <exp> : @l( <INT> )                                 // only in spec context
                     |  Res ⸨ [ <type> ] ⸩?                                 // only in contract ensures context
                     |  RS ( <name> ⸨ , <name> ⸩* )                         // only in spec context

<quant-op>         ::=  ∀
                     |  All
                     |  ∃
                     |  Exists

<lit>              ::=  true
                     |  false
                     |  <CHAR>
                     |  <int-lit>
                     |  z8"<NUM>"
                     |  z16"<NUM>"
                     |  z32"<NUM>"
                     |  z64"<NUM>"
                     |  n"<NUM>"
                     |  n8"<NUM>"
                     |  n16"<NUM>"
                     |  n32"<NUM>"
                     |  n64"<NUM>"
                     |  s8"<NUM>"
                     |  s16"<NUM>"
                     |  s32"<NUM>"
                     |  s64"<NUM>"
                     |  u8"<NUM>"
                     |  u16"<NUM>"
                     |  u32"<NUM>"
                     |  u64"<NUM>"
                     |  f32"<FLOAT>"
                     |  f64"<DOUBLE>"
                     |  r"<REAL>"
                     |  <FLOAT>
                     |  <DOUBLE>
                     |  <STRING>

<int-lit>          ::=  <INT>
                     |  <LONG>
                     |  z"<NUM>"

<args>             ::=  <type-args>? ( ⸨ <apply-arg> ⸨ , <apply-arg> ⸩* ⸩? )

<apply-arg>        ::=  <exp>
                     |  <exp> -> <exp>
                     |  <ID> = <exp>

<unary-op>         ::=  +
                     |  -
                     |  !
                     |  ~

<binary-op>        ::=  +
                     |  -
                     |  *
                     |  /
                     |  %
                     |  ==
                     |  !=
                     |  ~~
                     |  !~
                     |  ===
                     |  ≡
                     |  =!=
                     |  ≢
                     |  <<
                     |  >>
                     |  >>>
                     |  <
                     |  <=
                     |  >
                     |  >=
                     |  &&
                     |  ||
                     |  -->:        // right-associative
                     |  ___>:       // right-associative
                     |  &
                     |  |
                     |  |^
                     |  ->:         // right-associative
                     |  __>:        // right-associative
                     |  :+          // append
                     |  +:          // prepend, right-associative
                     |  ++          // append all
                     |  --          // remove all
                     |  <SYMID>     // an identifier whose characters are all symbols (except a single colon)
                                    // right associative if it ends with a colon

<sequent>          ::=  ⸨ <exp> ⸨  , <exp> ⸩* ⸩? <sequent-op> <exp> <proof>?

<sequent-op>       ::=  |-
                     |  ⊢
